9. Понятие процесса. Состояния процесса.
10. Планирование процессов в системах пакетной обработки.
11. Планирование процессов в интерактивных системах.
12. Планирование процессов в системах реального времени.
13. Операции над процессами.
14. Приоритеты процессов.
15. Понятие потока. Ресурсы и потоки в операционной системе
16. Понятие ресурса. Классификация ресурсов.
17. Дисциплины распределения ресурсов на основе очередей.
17. Основные элементы графических интерфейсов.
18. Интерфейс прикладного программирования (API).

1
Реализовать простую клиент-серверную программу на TCP с использованием только модуля socket. Обмен сообщениями между одним клиентом и сервером. В дальнейшем можно расширить.

Условия:
Сервер запускается и ждёт подключения от одного клиента.
После подключения происходит обмен сообщениями: клиент и сервер по очереди отправляют и получают строки.
Работа завершается при вводе exit любой из сторон.
Использовать только модуль socket.
Ввод данных через input().

Файлы:
tcp_server.py
tcp_client.py

Примерный алгоритм (у вас может быть по другому)
Сервер (tcp_server.py)
Создаёт TCP-сокет.
Привязывается к 127.0.0.1, порту (например, 5000).
Слушает и принимает подключение.
Получает сообщение от клиента → выводит → отправляет ответ.
Повторяет до получения exit.

Клиент (tcp_client.py)
Создаёт TCP-сокет.
Подключается к 127.0.0.1, порту 5000.
В цикле:
Отправляет строку, считанную с клавиатуры.
Получает ответ от сервера.
Завершает при вводе exit.

Оценивается при наличии скриншота работы

2
Реализовать простой UDP клиент и сервер, которые обмениваются сообщениями через socket.
Условия:
Клиент отправляет строку на сервер.
Сервер возвращает ту же строку обратно (эхо).
Завершение по команде exit от клиента.
Используется только socket.

Файлы:
udp_echo_server.py
udp_echo_client.py

Примерный алгоритм (у вас может быть по другому)
UDP Сервер (udp_echo_server.py)
Создаёт UDP-сокет.
Привязывается к 127.0.0.1, порту (например, 6000).
В бесконечном цикле:
Получает сообщение от клиента (recvfrom).
Если это exit, завершает.
Отправляет это сообщение обратно отправителю.

UDP Клиент (udp_echo_client.py)
Создаёт UDP-сокет.
В цикле:
Вводит строку.
Отправляет серверу.
Получает ответ.
Завершает при exit.

Оценивается при наличии скриншота работы

3
3.1 GET-запрос на Google
https://www.google.com.
Отобразить:
Статус-код ответа
Заголовки ответа
Первые 500 символов HTML-контента (без парсинга)
Файл: google_get.py

Оценивается при наличии скриншота работы

3.2 
Задание 2: POST-запрос на httpbin
https://httpbin.org/post.
Отправить словарь с произвольными данными, например:
{"username": "student", "exam": "http_test"}
Отобразить:
Статус-код ответа
Ответ в формате JSON
Подтверждение, что данные были получены сервером
Файл: post_to_httpbin.py

Оценивается при наличии скриншота работы
