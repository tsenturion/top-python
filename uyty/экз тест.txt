1. Предмет теории надежности.
2. Основные понятия и определения теории надежности.
3. Понятие «отказ» и классификация отказов информационных систем.
4. Зависимость надежности от времени.
7. Показатели надежности информационных систем.
10. Надежность восстанавливаемых систем.
11. Надежность невосстанавливаемых систем.
20. Классификация ошибок программного обеспечения.
26. Зависимость надежности от времени.
29. Показатели надежности вычислительных систем.
30. Специфика информационной системы как объекта исследования надежности.


Вам предоставлен модуль discount.py, расположенный внутри пакета my_pytest. Он содержит функции для работы с товарами и расчёта скидок в интернет-магазине.

Функции модуля my_pytest.discount:

validate_price(price: float) -> bool
Проверяет, что цена — положительное число.
Вызывает ValueError, если цена отрицательная или некорректного типа.

validate_discount(discount: float) -> bool
Проверяет, что скидка в диапазоне от 0 до 100 включительно.
Вызывает ValueError, если скидка выходит за пределы.

apply_discount(price: float, discount: float) -> float
Валидирует входные значения и возвращает цену с учётом скидки, округлённую до двух знаков после запятой.

calculate_cart_total(cart: list[dict]) -> float
Принимает список словарей с товарами ({"name": str, "price": float, "quantity": int}) и возвращает общую сумму.
Обрабатывает ошибки, связанные с типами, отсутствием ключей, неверными значениями.

Создайте модуль test_discount.py, в котором напишите тесты с использованием pytest.

Реализовать следующее:
Фикстуру cart(), возвращающую список товаров

Тесты функции apply_discount():
Применение обычной скидки (10%)
Скидка 0% и 100%
Ошибка при отрицательной цене
Ошибка при скидке выше 100%

Тесты функции calculate_cart_total():
Расчёт суммы корзины на основе фикстуры
Ошибка при нулевом количестве
Ошибка при отсутствии ключей
Ошибка при неверном типе элемента

Тесты валидации validate_price() и validate_discount():
Корректные значения
Ошибки при недопустимых данных

Результат
Файл test_discount.py, содержащий следующий минимум:
12 тестов (в том числе 4 для apply_discount, 4 для calculate_cart_total, 4 для валидаций)
хотя бы одна фикстура
хотя бы три проверки исключений через pytest.raises
обычные def-тесты с assert

