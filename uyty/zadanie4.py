import requests
from collections import Counter

def fetch_repos(username, token, per_page=5):
    page = 1
    repos = []
    headers = {"Authorization": f"token {token}"}

    output_lines = []
    output_lines.append(f"\n–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'...\n")

    while True:
        url = f"https://api.github.com/users/{username}/repos"
        params = {'per_page': per_page, 'page': page}
        response = requests.get(url, headers=headers, params=params)

        if response.status_code != 200:
            error = f"–û—à–∏–±–∫–∞: {response.status_code}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ–∫–µ–Ω."
            print(error)
            output_lines.append(error)
            break

        batch = response.json()
        if not batch:
            break

        repos.extend(batch)

        for repo in batch:
            info = (
                f"üì¶ {repo['name']}\n"
                f"   –Ø–∑—ã–∫: {repo['language']}\n"
                f"   ‚≠ê –ó–≤—ë–∑–¥—ã: {repo['stargazers_count']}\n"
                f"   üç¥ –§–æ—Ä–∫–∏: {repo['forks_count']}\n"
            )
            print(info)
            output_lines.append(info)

        page += 1
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...\n")

    return repos, output_lines

def analyze_repos(repos):
    total = len(repos)
    stars = sum(repo['stargazers_count'] for repo in repos)
    languages = [repo['language'] for repo in repos if repo['language']]
    most_common_lang = Counter(languages).most_common(1)
    most_used = most_common_lang[0][0] if most_common_lang else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    analysis = (
        "\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {total}\n"
        f"–ù–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —è–∑—ã–∫: {most_used}\n"
        f"–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {stars}\n"
    )
    print(analysis)
    return analysis

def main():
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub: ").strip()
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub —Ç–æ–∫–µ–Ω (Personal Access Token): ").strip()

    repos, output_lines = fetch_repos(username, token)

    if repos:
        analysis_result = analyze_repos(repos)
        output_lines.append(analysis_result)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    with open("github_repo_analyzer.txt", "w", encoding="utf-8") as f:
        f.writelines(output_lines)

    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'github_repo_analyzer.txt'.")

if __name__ == "__main__":
    main()
